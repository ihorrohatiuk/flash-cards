@page "/Units"
@using FlashCards.Core.Application.Dtos
@using FlashCards.Core.Domain.Entities
@using FlashCards.Infrastructure.Helpers
@using FlashCards.WebUI.Mocks
@inject HttpClient Http

<PageTitle>Units</PageTitle>

@if (_userUnits == null)
{
    <h3>Loading your flash card's units...</h3>
    
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <div class="custom-flex-container">
        <h3>Your units</h3>
        <MudButton 
            Variant="Variant.Filled" 
            Size="Size.Small" 
            StartIcon="@Icons.Material.Filled.Add" 
            Color="Color.Primary" Href="/add-unit">Add unit</MudButton>
    </div>
    
    <MudGrid Justify="Justify.FlexStart" Spacing="5">
        @foreach (FlashCardsUnitInfoDto unit in _userUnits)
        {
            <MudItem Class="mud-grid-your-units" xs="12" sm="12" md="12" lg="12">
                <MudLink Href="/flip" Style="text-decoration: none; display: inline-block; width: 100%">
                    <MudCard Outlined="true" Class="mud-card-unit">
                        <MudCardContent>
                            @*Unit name*@
                            <MudText Typo="Typo.h5" FontWeight="FontWeight.Bold">@TextHelper.TruncateText(unit.Name, UnitNameMaximumDisplayingLength)</MudText>
                            <div class="card-content">
                                <MudStack Direction="Column" Spacing="2" AlignItems="AlignItems.Start">
                                    @*Subject name*@
                                    <MudChip T="string" Color="Color.Primary" Class="mt-2 ml-0">
                                        <ChildContent>@TextHelper.TruncateText(unit.Subject, UnitSubjectMaximumDisplayingLength)</ChildContent>
                                    </MudChip>
                                    <div class="accessibility-owner">
                                        @*Accessibility*@
                                        @if (unit.IsPrivate)
                                        {
                                            <MudChip T="string" Style="@($"background:{Colors.Red.Accent1}")" Class="m-0">
                                                <ChildContent>
                                                    <MudIcon Icon="@Icons.Material.Outlined.Lock" Style="@($"color:{Colors.Red.Accent4}")"/>
                                                    <MudText Style="@($"color:{Colors.Red.Accent4}")">Private</MudText>
                                                </ChildContent>
                                            </MudChip>
                                        }
                                        else
                                        {
                                            <MudChip T="string" Style="@($"background:{Colors.Green.Accent1}")" Class="m-0">
                                                <ChildContent>
                                                    <MudIcon Icon="@Icons.Material.Outlined.LockOpen" Style="@($"color:{Colors.Green.Accent4}")"/>
                                                    <MudText Style="@($"color:{Colors.Green.Accent4}")">Public</MudText>
                                                </ChildContent>
                                            </MudChip>
                                        }
                                        <div class="divider"></div>
                                        @*User*@
                                        <MudChip T="string" Variant="Variant.Outlined" Class="m-0">
                                            <AvatarContent>
                                                <MudAvatar Style="@($"background:{Colors.Purple.Lighten4}")">@TextHelper.GetFirstLettersOfName(unit.Owner)</MudAvatar>
                                            </AvatarContent>
                                            <ChildContent>@TextHelper.TruncateText(unit.Owner, UnitOwnerMaximumDisplayingLength)</ChildContent>
                                        </MudChip>
                                    </div>
                                </MudStack>
                                @*Progress*@
                                <div class="progress-bar hide-on-medium">
                                    @(unit.Progress)%
                                    <MudProgressLinear Color="Color.Success" Rounded="true" Size="Size.Large" Value="@(unit.Progress)"/>
                                </div>
                                @*Cards quantity*@
                                <div class="hide-on-small">
                                    <MudText class="hide-on-small" Typo="Typo.h5" FontWeight="FontWeight.Bold">@(unit.CardsQuantity) cards</MudText>
                                </div>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudLink>
            </MudItem>
        }
    </MudGrid>
}


@code {
    private const int UnitNameMaximumDisplayingLength = 25;
    private const int UnitSubjectMaximumDisplayingLength = 30;
    private const int UnitOwnerMaximumDisplayingLength = 15;
    
    private List<FlashCardsUnitInfoDto>? _userUnits;

    protected override async Task OnInitializedAsync()
    {
        await LoadUnits();
    }

    private async Task LoadUnits()
    {
        // Mocking API response delay 
        await Task.Delay(500);
        _userUnits = await Http.GetFromJsonAsync<List<FlashCardsUnitInfoDto>>("sample-data/units.json");
    }
}