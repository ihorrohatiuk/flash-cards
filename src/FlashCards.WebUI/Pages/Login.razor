@page "/Login"
@using FlashCards.Core.Application.Dtos
@using FlashCards.Infrastructure.Services
@inject NavigationManager Navigation
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService

<MudPaper Elevation="4" Style="max-width: 400px;
    margin: 100px auto;
    padding: 30px;
    display: flex;
    flex-direction: column;
    gap: 16px;">
    <MudText Typo="Typo.h4" Align="Align.Center">Log in</MudText>

    <MudForm Valid="_isValid" Spacing="4">
        <MudTextField 
            @bind-Value="_loginRequestDto.Email"
            Label="Email" 
            Required="true" 
            RequiredError="Email is required" />
        <MudTextField 
            @bind-Value="_loginRequestDto.Password" 
            Label="Password" Required="true" 
            InputType="InputType.Password" 
            RequiredError="Password is required" />

        <MudButton 
            Variant="Variant.Filled" 
            Color="Color.Primary" 
            OnClick="SubmitAsync"
            Disabled="@_isLoginButtonDisable">Login</MudButton>
    </MudForm>

    @if (_errorMessage != null)
    {
        <MudAlert Severity="Severity.Error">@_errorMessage</MudAlert>
    }
    @if (_isLoginSuccess)
    {
        <MudAlert Severity="Severity.Success">Login success</MudAlert>
    }
</MudPaper>

@code {
    private bool _isInputValid = false;
    private bool _isLoginSuccess = false;
    private string? _errorMessage = null!;
    private bool _isLoginButtonDisable = false;

    private LoginRequestDto _loginRequestDto = new();
    
    protected override async Task OnInitializedAsync()
    {
        var token = await AuthenticationService.GetJwtAsync();

        if (!string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/", forceLoad: true);
        }
    }

    private async Task SubmitAsync()
    {
        try
        {
            _isLoginButtonDisable = true;
            _isLoginSuccess = await AuthenticationService.LoginAsync(_loginRequestDto);
            _errorMessage = null;

            if (_isLoginSuccess)
                NavigationManager.NavigateTo("/", forceLoad: true);

            StateHasChanged();
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
        finally
        {
            _isLoginButtonDisable = false;
        }
    }
}