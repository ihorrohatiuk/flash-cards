@page "/Add-Unit"
@using FlashCards.Core.Domain.Constants
@using FlashCards.Core.Domain.Entities
@using FlashCards.WebUI.Services
@using FlashCards.WebUI.Validation

@inject ISnackbar Snackbar
@inject FlashCardStateContainer FlashCardStateContainer

<div class="custom-flex-container">
    <h3>New unit</h3>
    <div class="buttons">
        @*Import button*@
        <MudButton
            Disabled="@(_flashCards?.Count > 1)"
            Class="me-2 ms-0"
            Variant="Variant.Outlined"
            Size="Size.Medium"
            StartIcon="@Icons.Material.Filled.ArrowDownward"
            Color="Color.Primary">
            Import
        </MudButton>
        @*Save button*@
        <MudButton
            Variant="Variant.Filled"
            Size="Size.Medium"
            StartIcon="@Icons.Material.Filled.Save"
            Color="Color.Primary"
            OnClick="SaveUnitAsync">
            Save
        </MudButton>
    </div>
</div>

<MudForm Style="width: 100%" Class="mb-2" Spacing="2" @ref="_unitInfo">
    <MudCard Outlined="true" Class="mb-5">
        <MudCardContent>
                <MudTextField
                    Validation="@(new Func<string, IEnumerable<string>>(AddUnitValidation.UnitNameValidation))"
                    T="string" 
                    Class="mb-2" 
                    Margin="Margin.Dense" 
                    Label="Unit name" 
                    Variant="Variant.Filled"/>
                <MudTextField 
                    T="string" 
                    Margin="Margin.Dense" 
                    Label="Subject"
                    Immediate="true" 
                    Variant="Variant.Filled"/>
        </MudCardContent>
    </MudCard>

    @foreach (var flashCard in _flashCards)
    {
        <MudCard Outlined="true" Class="mb-5">
            <MudCardContent>
                        @*Question field*@
                        <MudTextField
                            Validation="@(new Func<string, IEnumerable<string>>(AddUnitValidation.QuestionValidation))"
                            T="string"
                            Label="Question"
                            @bind-Value="flashCard.Question"/>
                        @*Answer field*@
                        <MudTextField
                            Validation="@(new Func<string, IEnumerable<string>>(AddUnitValidation.AnswerValidation))"
                            Class="mb-2"
                            T="string"
                            Label="Answer"
                            @bind-Value="flashCard.Answer"/>
                        <MudStack AlignItems="AlignItems.End">
                            <MudButton Variant="Variant.Filled"
                                       Size="Size.Medium"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       Color="Color.Secondary"
                                       OnClick="() => DeleteFlashCard(flashCard)">
                                Delete
                            </MudButton>
                        </MudStack>
            </MudCardContent>
        </MudCard>
    }
</MudForm>

@*Add a flash card button*@
<MudButton
    FullWidth="true"
    Variant="Variant.Filled"
    Size="Size.Medium"
    Color="Color.Primary"
    OnClick="AddFlashCard">
    Add a flash card
</MudButton>

@code {
    private MudForm _unitInfo;
    private List<FlashCard>? _flashCards;

    protected override void OnInitialized()
    {
        if (FlashCardStateContainer.FlashCards != null)
        {
            _flashCards = FlashCardStateContainer.FlashCards;
            // Delete flash cards from state container to avoid unexpected behavior
            FlashCardStateContainer.FlashCards = null;
        }
        else
        {
            _flashCards = [];
            AddFlashCard();
        }
    }

    private void AddFlashCard()
    {
        if (_flashCards.Count < AppConstants.FlashCardsMaxQuantityPerUnit)
        {
            _flashCards.Add(new FlashCard());
            StateHasChanged();
            return;
        }

        Snackbar.Add($"Maximum number of cards reached ({AppConstants.FlashCardsMaxQuantityPerUnit})", Severity.Info);
    }

    private void DeleteFlashCard(FlashCard card)
    {
        if (_flashCards is null || !_flashCards.Contains(card))
        {
            Snackbar.Add($"An unexpected error occurred, try again later", Severity.Error);
            return;
        }

        if (_flashCards.Count < 2)
        {
            Snackbar.Add($"Unit should has at least one flash card", Severity.Info);
            return;
        }
        
        _flashCards.Remove(card);
        StateHasChanged();
    }

    private async Task SaveUnitAsync()
    {
        await _unitInfo.Validate();
        bool isValid = _unitInfo.IsValid;

        if (isValid)
        {
            // TODO: FE -> add save logic here.
            foreach (var card in _flashCards)
            {
                Console.WriteLine("Question: " + card.Question);
                Console.WriteLine("Answer: " + card.Answer);
            }

            return;
        }
        
        Snackbar.Add($"Some fields are filled out incorrectly", Severity.Error);
    }
}