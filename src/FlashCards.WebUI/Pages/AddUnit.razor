@page "/Add-Unit"
@using FlashCards.WebUI.Mocks
@inject ISnackbar Snackbar

<div class="custom-flex-container">
    <h3>New unit</h3>
    <div class="buttons">
        <MudButton
            Variant="Variant.Filled"
            Size="Size.Medium"
            StartIcon="@Icons.Material.Filled.ArrowDownward"
            Color="Color.Primary">
            Import
        </MudButton>
        <MudButton
            Variant="Variant.Filled"
            Size="Size.Medium"
            StartIcon="@Icons.Material.Filled.Save"
            Color="Color.Primary"
            OnClick="SaveUnit">
            Save
        </MudButton>
    </div>
</div>

<MudCard Outlined="true" Class="mb-5">
    <MudCardContent>
        <MudForm >
            <MudTextField T="string" Label="Unit name" Required="true" RequiredError="Unit name is required!"/>
        </MudForm>
        <MudForm >
            <MudTextField T="string" Label="Subject" Required="false"/>
        </MudForm>
    </MudCardContent>
</MudCard>

@foreach (var flashCard in _flashCards)
{
    <MudCard Outlined="true" Class="mb-5">
        <MudCardContent>
            <MudStack AlignItems="AlignItems.End">
                <MudForm Style="width: 100%">
                    <MudTextField T="string" Label="Question" Required="true" RequiredError="Question is required!"
                                  @bind-Value="flashCard.Question"/>
                </MudForm>
                <MudForm Class="mb-2" Style="width: 100%">
                    <MudTextField T="string" Label="Answer" Required="true" RequiredError="Answer is required!"
                                  @bind-Value="flashCard.Answer"/>
                </MudForm>
                <MudButton Variant="Variant.Filled"
                           Size="Size.Medium"
                           StartIcon="@Icons.Material.Filled.Delete"
                           Color="Color.Secondary"
                           OnClick="() => DeleteFlashCard(flashCard)">
                    Delete
                </MudButton>
            </MudStack>
        </MudCardContent>
    </MudCard>
}

<MudButton
    FullWidth="true"
    Variant="Variant.Filled"
    Size="Size.Medium"
    Color="Color.Primary"
    OnClick="AddFlashCard">
    Add a flash card
</MudButton>

@code {
    private const int FlashCardsMaximumQuantity = 3;
    
    private List<FlashCardDto>? _flashCards;

    protected override void OnInitialized()
    {
        _flashCards = [];
    }

    private void AddFlashCard()
    {
        if (_flashCards.Count < FlashCardsMaximumQuantity)
        {
            _flashCards.Add(new FlashCardDto());
            StateHasChanged();
            return;
        }

        Snackbar.Add($"Maximum number of cards reached ({FlashCardsMaximumQuantity})", Severity.Info);
    }

    private void DeleteFlashCard(FlashCardDto card)
    {
        if (_flashCards is null || !_flashCards.Contains(card))
        {
            Snackbar.Add($"An unexpected error occurred, try again later", Severity.Error);
            return;
        }

        if (_flashCards.Count < 2)
        {
            Snackbar.Add($"Unit should has at least one flash card", Severity.Info);
            return;
        }
        
        _flashCards.Remove(card);
        StateHasChanged();
    }

    private void SaveUnit()
    {
        // TODO: FE -> add save logic here.
        foreach (var card in _flashCards)
        {
            Console.WriteLine("Question: " + card.Question);
            Console.WriteLine("Answer: " + card.Answer);
        }
    }
}