@using FlashCards.Core.Application.Dtos
@using FlashCards.Core.Domain.Constants
@using FlashCards.Core.Domain.Entities
@using FlashCards.WebUI.Validation

@inject ISnackbar Snackbar

<MudForm Style="width: 100%" Class="mb-2" Spacing="2" @ref="UnitForm">
    <MudCard Outlined="true" Class="mb-5">
        <MudCardContent>
                <MudTextField
                    Validation="@(new Func<string, IEnumerable<string>>(UnitValidation.UnitNameValidation))"
                    T="string" 
                    Class="mb-2" 
                    Margin="Margin.Dense" 
                    Label="Unit name" 
                    Variant="Variant.Filled"
                    @bind-Value="@UnitDto.FlashCardsUnit.Name"/>
                <MudTextField
                    Validation="@(new Func<string, IEnumerable<string>>(UnitValidation.UnitSubjectValidation))"
                    T="string" 
                    Margin="Margin.Dense" 
                    Label="Subject"
                    Immediate="true" 
                    Variant="Variant.Filled"
                    @bind-Value="UnitDto.FlashCardsUnit.Subject"/>
        </MudCardContent>
    </MudCard>

    @foreach (var flashCard in UnitDto.FlashCards)
    {
        <MudCard Outlined="true" Class="mb-5">
            <MudCardContent>
                        @*Question field*@
                        <MudTextField
                            Validation="@(new Func<string, IEnumerable<string>>(UnitValidation.QuestionValidation))"
                            T="string"
                            Label="Question"
                            @bind-Value="flashCard.Question"/>
                        @*Answer field*@
                        <MudTextField
                            Validation="@(new Func<string, IEnumerable<string>>(UnitValidation.AnswerValidation))"
                            Class="mb-2"
                            T="string"
                            Label="Answer"
                            @bind-Value="flashCard.Answer"/>
                        <MudStack AlignItems="AlignItems.End">
                            <MudButton Variant="Variant.Filled"
                                       Size="Size.Medium"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       Color="Color.Secondary"
                                       OnClick="() => DeleteFlashCard(flashCard)">
                                Delete
                            </MudButton>
                        </MudStack>
            </MudCardContent>
        </MudCard>
    }
</MudForm>

@*Add a flash card button*@
<MudButton
    FullWidth="true"
    Variant="Variant.Filled"
    Size="Size.Medium"
    Color="Color.Primary"
    OnClick="AddFlashCard">
    Add a flash card
</MudButton>

@code {
    [Parameter] public FlashCardsUnitDto UnitDto { get; set; }
    [Parameter] public MudForm UnitForm { get; set; }

    private void AddFlashCard()
    {
        if (UnitDto.FlashCards.Count < AppConstants.FlashCardsMaxQuantityPerUnit)
        {
            UnitDto.FlashCards.Add(new FlashCard());
            StateHasChanged();
            return;
        }

        Snackbar.Add($"Maximum number of cards reached ({AppConstants.FlashCardsMaxQuantityPerUnit})", Severity.Info);
    }

    private void DeleteFlashCard(FlashCard card)
    {
        if (UnitDto.FlashCards is null || !UnitDto.FlashCards.Contains(card))
        {
            Snackbar.Add($"An unexpected error occurred, try again later", Severity.Error);
            return;
        }

        if (UnitDto.FlashCards.Count < 2)
        {
            Snackbar.Add($"Unit should has at least one flash card", Severity.Info);
            return;
        }
        
        UnitDto.FlashCards.Remove(card);
        StateHasChanged();
    }
}